import java.io.IOException;
import java.util.Iterator;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.conf.Configuration;


public class MyMaxMin {


   // Mapper Class
   public static class MaxTemperatureMapper extends Mapper<LongWritable, Text, Text, Text> {
       @Override
       public void map(LongWritable arg0, Text Value, Context context) throws IOException, InterruptedException {
           String line = Value.toString();
           if (!(line.length() == 0)) {


               // NEW ROBUST PARSING LOGIC
               String[] parts = line.trim().split("\\s+");


               // Ensure the line has enough parts to avoid errors
               if (parts.length >= 5) {
                   try {
                       String date = parts[1];
                       float temp_Max = Float.parseFloat(parts[3]);
                       float temp_Min = Float.parseFloat(parts[4]);


                       if (temp_Max > 35.0) {
                           context.write(new Text("Hot Day " + date), new Text(String.valueOf(temp_Max)));
                       }
                       if (temp_Min < 10) {
                           context.write(new Text("Cold Day " + date), new Text(String.valueOf(temp_Min)));
                       }
                   } catch (NumberFormatException e) {
                       // This will safely ignore any line that is still incorrectly formatted (like a comment)
                       System.err.println("Could not parse line, skipping: " + line);
                   }
               }
           }
       }
   }


   // Reducer Class
   public static class MaxTemperatureReducer extends Reducer<Text, Text, Text, Text> {
       public void reduce(Text Key, Iterator<Text> Values, Context context) throws IOException, InterruptedException {
           String temperature = Values.next().toString();
           context.write(Key, new Text(temperature));
       }
   }


   public static void main(String[] args) throws Exception {
       Configuration conf = new Configuration();
       Job job = new Job(conf, "Weather Example");


       job.setJarByClass(MyMaxMin.class);
       job.setMapOutputKeyClass(Text.class);
       job.setMapOutputValueClass(Text.class);
       job.setMapperClass(MaxTemperatureMapper.class);
       job.setReducerClass(MaxTemperatureReducer.class);
       job.setInputFormatClass(TextInputFormat.class);
       job.setOutputFormatClass(TextOutputFormat.class);


       Path OutputPath = new Path(args[1]);
       FileInputFormat.addInputPath(job, new Path(args[0]));
       FileOutputFormat.setOutputPath(job, OutputPath);


       OutputPath.getFileSystem(conf).delete(OutputPath, true);


       System.exit(job.waitForCompletion(true) ? 0 : 1);
   }
}
